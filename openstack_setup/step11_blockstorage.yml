
--- 
- name: Pre-req
  hosts: controller
  remote_user: "jibin"
  become: true # needs become true for retrieving secrets otherwise" unable to get local issuer certificate "
  tasks:
    - include_vars:  dir=vars 

    - name: Fail if vault_token not set
      fail: msg="This play requires vault_token use --extra  --extra-vars 'vault_token=<token>'" 
      when: vault_token is not defined 
    - name: Retrieving secrets  from vault
      uri:
        url: "{{vault_addr}}{{item}}"
        method: GET
        headers:
          X-Vault-Token: "{{vault_token}}"

      with_items:
        - /v1/kv/openstack-deploy/MYSQL_PASS  
        - /v1/kv/openstack-deploy/KEYSTONE_ADMIN_PASS  
        - /v1/kv/openstack-deploy/CINDER_DBPASS 
        - /v1/kv/openstack-deploy/RABBIT_PASS  
        - /v1/kv/openstack-deploy/CINDER_PASS
      register: output

    - name: Set MYSQL_PASS, KEYSTONE_ADMIN_PASS, CINDER_DBPASS, RABBIT_PASS 
      set_fact: 
        MYSQL_PASS: "{{output.results[0].json.data.value}}" 
        KEYSTONE_ADMIN_PASS:   "{{output.results[1].json.data.value}}" 
        CINDER_DBPASS:   "{{output.results[2].json.data.value}}" 
        RABBIT_PASS: "{{output.results[3].json.data.value}}"     
        CINDER_PASS: "{{output.results[4].json.data.value}}"     
- name:  Setup mysql pre-req for CINDER  
  hosts: controller
  remote_user: "jibin"
  become: true 
  tasks: 
    - name: Create a new cinder database 
      mysql_db:
        name: "{{item}}"
        login_user: root 
        login_password: "{{MYSQL_PASS}}"
        login_unix_socket: /var/run/mysqld/mysqld.sock 
        state: present
      with_items:
        - cinder 

    - name: Create cinder dbuser with password, grant on  
      mysql_user:
        state: present
        name: cinder
        password: "{{CINDER_DBPASS}}"
        login_unix_socket: /var/run/mysqld/mysqld.sock 
        login_user: root
        login_password: "{{MYSQL_PASS}}"
        host: "{{item.host}}"
        append_privs: yes
        priv:  
          "{{item.priv}}"
      with_items:
        - {host: 'localhost', priv: "cinder.*:ALL,GRANT"}
        - {host: '%', priv: "cinder.*:ALL,GRANT"} 
      no_log: true


- name: Create cinder user and it project
  hosts: controller
  remote_user: "jibin"
  become: true 

  vars:
    os_env:
      OS_USERNAME: admin
      OS_PASSWORD: "{{KEYSTONE_ADMIN_PASS}}"
      OS_PROJECT_NAME: admin
      OS_USER_DOMAIN_NAME: Default
      OS_PROJECT_DOMAIN_NAME: Default
      OS_AUTH_URL: http://controller:5000/v3
      OS_IDENTITY_API_VERSION: 3

  tasks:
    - name: Create cinder user 
      os_user:
        state: present
        name: cinder
        password: "{{CINDER_PASS}}" 
        domain: default 
      environment: "{{ os_env }}"
      no_log: true
      
    - name: assign cinder admin role 
      os_user_role: 
        user: cinder
        role: admin
        project: service
      environment: "{{ os_env }}"

    - name: Create service entity for cinderv2  
      os_keystone_service: 
        state: present
        name: cinderv2
        service_type: volumev2
        description: "OpenStack Block Storage"

      environment: "{{ os_env }}"

    - name: Create service entity for cinderv3  
      os_keystone_service: 
        state: present
        name: cinderv3
        service_type: volumev3
        description: "OpenStack Block Storage"

      environment: "{{ os_env }}"

    - name: Create a PUBLIC,INTERNAL,ADMIN service endpoints for cinderv2
      openstack.cloud.endpoint: 
        service: cinderv2
        endpoint_interface: "{{item}}"
        url: 'http://controller:8776/v2/%(project_id)s'
        region: RegionOne
        state: present
      with_items:
        - public
        - internal
        - admin
      environment: "{{ os_env }}"

    - name: Create a PUBLIC,INTERNAL,ADMIN service endpoints for cinderv3
      openstack.cloud.endpoint: 
        service: cinderv3
        endpoint_interface: "{{item}}"
        url: http://controller:8776/v3/%(project_id)s
        region: RegionOne
        state: present
      with_items:
        - public
        - internal
        - admin
      environment: "{{ os_env }}"


- name: Install and configure Cinder components
  hosts: controller
  remote_user: "jibin"
  become: true 
  tasks: 
    - name: Install cinder packages
      apt:
        name: 
          - cinder-api
          - cinder-scheduler
          - cinder-volume
        state: present 
      
    - name: Configure   /etc/cinder/cinder.conf 
      template:
        src: "{{ playbook_dir }}/configs/templates/cinder.conf.j2"
        dest: "/etc/cinder/cinder.conf"
        mode: '0640'

    - name: Populate the Block Storage database
      shell: 'su -s /bin/sh -c "cinder-manage db sync" cinder' 
      register: out  
    - debug:  msg="{{out.stdout}}"


    - name: Finalize installation
      systemd:
        state: restarted
        enabled: yes
        daemon_reload: yes
        name: "{{item}}"
      with_items:
        - nova-api
        - cinder-scheduler
        - apache2


- name: Install and configure a storage node
  hosts: blockstore
  remote_user: "jibin"
  become: true 
  tasks: 
    - name: Install cinder packages
      apt:
        name: 
          - lvm2
          - thin-provisioning-tools
          - cinder-volume
        state: present  
 
    - name: Create the LVM volume group cinder-volumes  /dev/nvme0n1
      lvg:
        vg: cinder-volumes
        pvs: /dev/nvme0n1 
    - name: To restrict LVM volume scanning tool scans
      copy:
        src: "{{ playbook_dir }}/configs/lvm.conf"
        dest: "/etc/lvm/lvm.conf"
        
        mode: '0640'
 
    - name: Finalize installation
      systemd:
        state: restarted
        enabled: yes
        daemon_reload: yes
        name: "{{item}}"
      with_items:
        - tgt
        - cinder-volume
    

 